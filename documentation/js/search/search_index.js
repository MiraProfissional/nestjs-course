var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.162,1,1.94]],["body/controllers/AppController.html",[0,1.894,1,3.163,2,1.542,3,0.621,4,0.548,5,0.548,6,3.386,7,0.763,8,0.036,9,1.056,10,2.748,11,3.386,12,0.621,13,0.125,14,2.297,15,1.869,16,0.03,17,0.03]],["title/modules/AppModule.html",[18,1.162,19,1.94]],["body/modules/AppModule.html",[1,2.913,2,1.524,3,0.445,4,0.393,5,0.393,7,0.822,8,0.036,9,0.757,10,2.734,11,2.428,12,0.445,13,0.089,16,0.024,17,0.024,18,1.745,19,3.72,20,1.339,21,1.339,22,1.647,23,1.647,24,1.339,25,2.599,26,1.647,27,2.428,28,2.428,29,2.428,30,2.734,31,3.039,32,2.472,33,2.271,34,1.647,35,1.339,36,2.934,37,2.545,38,2.934,39,2.934,40,2.934,41,2.934]],["title/injectables/AppService.html",[10,1.557,42,1.162]],["body/injectables/AppService.html",[3,0.595,4,0.525,5,0.525,7,0.595,8,0.036,9,1.011,10,2.471,12,0.595,13,0.119,16,0.029,17,0.029,42,1.844,43,2.199,44,3.242,45,0.917,46,2.471,47,5.589,48,1.224,49,3.918,50,1.978,51,1.678,52,1.978,53,3.918,54,3.918]],["title/controllers/AuthController.html",[0,1.162,55,1.94]],["body/controllers/AuthController.html",[0,1.525,2,1.525,3,0.614,4,0.542,5,0.542,7,0.758,8,0.036,9,1.045,12,0.614,13,0.123,14,2.272,15,1.848,16,0.029,17,0.029,55,3.141,56,3.349,57,2.889,58,4.047,59,2.473,60,3.349,61,4.047]],["title/modules/AuthModule.html",[18,1.162,30,1.557]],["body/modules/AuthModule.html",[2,1.618,3,0.486,4,0.429,5,0.429,7,0.786,8,0.036,9,0.827,12,0.486,13,0.097,16,0.025,17,0.025,18,1.825,20,1.462,21,1.462,22,1.797,23,1.797,24,1.462,25,2.719,26,2.719,30,2.866,32,1.961,33,2.41,34,1.797,35,1.462,37,2.014,55,3.048,59,2.739,60,2.649,62,2.649,63,2.649,64,2.649,65,3.202,66,2.701,67,3.202,68,2.649]],["title/injectables/AuthService.html",[42,1.162,59,1.408]],["body/injectables/AuthService.html",[3,0.431,4,0.381,5,0.381,7,0.601,8,0.036,9,0.734,12,0.431,13,0.087,15,1.298,16,0.023,17,0.023,42,1.492,43,1.596,45,0.665,46,1.999,48,1.422,50,1.999,51,1.979,52,1.999,59,1.808,66,1.788,69,2.353,70,3.01,71,4.076,72,3.959,73,2.826,74,2.353,75,2.279,76,2.843,77,2.222,78,2.222,79,1.236,80,1.64,81,2.843,82,2.843,83,3.959,84,3.252,85,3.769,86,2.843,87,1.788,88,2.353,89,2.353,90,2.353,91,2.353,92,2.03,93,2.03,94,2.843,95,2.843,96,2.353]],["title/classes/CreatePostDto.html",[13,0.094,97,1.731]],["body/classes/CreatePostDto.html",[3,0.175,4,0.155,5,0.155,7,0.558,8,0.036,12,0.175,13,0.078,16,0.012,17,0.012,45,0.27,48,1.39,51,1.733,79,1.577,80,1.947,96,2.797,97,1.102,98,0.528,99,3.272,100,0.825,101,1.168,102,3.041,103,2.559,104,2.559,105,3.243,106,2.559,107,2.559,108,3.918,109,1.827,110,3.38,111,3.041,112,2.032,113,2.797,114,2.146,115,3.327,116,1.155,117,1.155,118,1.963,119,1.963,120,3.413,121,1.155,122,1.155,123,1.898,124,1.155,125,3.017,126,1.624,127,1.624,128,1.963,129,1.155,130,1.155,131,1.155,132,2.496,133,3.017,134,3.674,135,1.963,136,3.017,137,1.155,138,1.155,139,3.017,140,1.624,141,1.963,142,1.963,143,1.624,144,1.963,145,1.155,146,1.155,147,1.963,148,1.963,149,2.559,150,1.963,151,1.963,152,1.963,153,1.963,154,1.155,155,1.155,156,3.017,157,3.017,158,3.017,159,3.017,160,2.496,161,3.017,162,2.496,163,1.155,164,3.017,165,3.017,166,1.624,167,1.155,168,2.496,169,1.963,170,1.155,171,1.155,172,1.963,173,1.155,174,1.155,175,3.017,176,1.155,177,1.155,178,1.155,179,2.559,180,1.155,181,1.963,182,1.963,183,2.126,184,2.798,185,2.413,186,1.963,187,0.956,188,0.956,189,1.963,190,0.583,191,1.155,192,1.155,193,0.825,194,1.401,195,1.155,196,0.825,197,2.797,198,3.243,199,0.583,200,2.093,201,1.155,202,1.155,203,1.155,204,1.155,205,1.155,206,1.155,207,1.155,208,1.155,209,0.956,210,0.956,211,0.956,212,2.117,213,0.956,214,1.155,215,1.155,216,1.401,217,0.956,218,1.155]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.094,123,1.94]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.537,4,0.474,5,0.474,7,0.537,8,0.035,12,0.537,13,0.14,16,0.027,17,0.027,45,0.829,48,1.433,51,1.574,79,1.433,98,1.617,99,3.634,101,2.095,112,2.095,114,2.324,123,2.886,183,3.387,185,3.276,190,1.788,194,3.634,212,4.212,216,3.634,219,2.93,220,3.541,221,3.541,222,3.541]],["title/classes/CreateUserDTO.html",[13,0.094,223,1.731]],["body/classes/CreateUserDTO.html",[3,0.399,4,0.352,5,0.352,7,0.399,8,0.035,12,0.399,13,0.114,16,0.022,17,0.022,45,0.615,48,1.486,51,1.886,79,1.486,80,1.553,84,3.117,85,3.612,98,1.201,101,1.711,112,2.172,166,3.101,183,2.993,184,2.675,185,3.397,187,2.176,188,2.176,190,1.328,211,3.101,223,2.103,224,4.162,225,1.877,226,3.612,227,4.365,228,2.629,229,2.629,230,2.629,231,2.629,232,2.629,233,2.629,234,2.629,235,4.758,236,3.747,237,3.747,238,3.747,239,3.747,240,3.747,241,5.228,242,3.747,243,2.103,244,3.747,245,3.747,246,2.629,247,2.629,248,3.747,249,3.747,250,2.629,251,2.629]],["title/classes/GetUsersParamDto.html",[13,0.094,252,1.731]],["body/classes/GetUsersParamDto.html",[3,0.49,4,0.433,5,0.433,7,0.738,8,0.036,12,0.49,13,0.148,16,0.025,17,0.025,45,0.756,48,1.009,51,1.108,79,1.52,80,1.79,87,3.406,93,3.083,98,1.475,101,1.972,112,1.475,113,2.673,115,2.717,162,2.673,184,3.083,190,1.631,196,2.306,198,3.574,199,1.631,200,1.475,243,2.916,252,2.424,253,3.574,254,2.717,255,2.673,256,4.319,257,3.23,258,3.23,259,3.574,260,3.23,261,3.23,262,2.673,263,3.23,264,2.306]],["title/classes/PatchPostDto.html",[13,0.094,265,1.94]],["body/classes/PatchPostDto.html",[3,0.515,4,0.455,5,0.455,7,0.757,8,0.036,12,0.515,13,0.136,16,0.026,17,0.026,45,0.794,48,1.06,79,1.06,87,3.462,97,1.905,98,1.55,100,2.423,101,2.038,112,1.55,114,2.038,132,2.808,183,2.808,190,1.714,193,2.423,197,3.693,199,1.714,200,1.55,243,2.505,259,3.693,265,2.808,266,3.693,267,3.693,268,4.463,269,4.463,270,3.394,271,3.394,272,2.808,273,2.808,274,2.808]],["title/classes/PatchUserDto.html",[13,0.094,275,1.94]],["body/classes/PatchUserDto.html",[3,0.621,4,0.548,5,0.548,7,0.763,8,0.035,12,0.621,13,0.125,16,0.03,17,0.03,98,1.869,193,2.922,223,2.297,225,2.922,267,4.16,272,3.386,275,3.163,276,3.386,277,5.027,278,3.386,279,3.386,280,3.386]],["title/controllers/PostsController.html",[0,1.162,281,1.94]],["body/controllers/PostsController.html",[0,0.762,2,0.762,3,0.307,4,0.271,5,0.271,7,0.685,8,0.036,9,0.522,12,0.307,13,0.062,14,1.135,15,0.923,16,0.018,17,0.018,45,0.473,46,1.559,48,1.169,50,1.89,51,1.547,52,1.89,57,1.444,70,2.933,77,2.101,78,2.101,79,1.169,80,1.551,97,2.669,109,2.204,112,1.709,114,2.386,120,3.466,199,1.021,200,1.913,264,1.444,265,2.991,273,2.554,274,2.554,281,1.942,282,1.674,283,3.743,284,3.087,285,3.087,286,3.087,287,2.022,288,3.087,289,3.087,290,2.204,291,3.087,292,4.189,293,4.189,294,3.087,295,2.022,296,2.022,297,2.022,298,3.087,299,2.022,300,2.554,301,2.022,302,2.554,303,3.087,304,3.466,305,2.022,306,2.022,307,1.674,308,3.098,309,1.89,310,1.674,311,3.098,312,3.098,313,1.674,314,1.674,315,1.674,316,2.022,317,2.022,318,2.022,319,2.022,320,2.554,321,2.554,322,2.022,323,2.022,324,2.554,325,2.554,326,2.554,327,2.022,328,2.022]],["title/modules/PostsModule.html",[18,1.162,31,1.731]],["body/modules/PostsModule.html",[2,1.642,3,0.497,4,0.439,5,0.439,7,0.793,8,0.036,9,0.845,12,0.497,13,0.1,16,0.026,17,0.026,18,1.846,20,1.494,21,1.494,22,1.837,23,1.837,24,1.494,25,2.749,26,1.837,31,3.254,32,2.554,33,2.446,34,1.837,35,1.494,37,2.741,68,2.708,281,3.081,309,2.824,310,2.708,329,2.708,330,3.273,331,2.708,332,3.273,333,3.273]],["title/injectables/PostsService.html",[42,1.162,309,1.557]],["body/injectables/PostsService.html",[3,0.452,4,0.399,5,0.399,7,0.621,8,0.036,9,0.77,12,0.452,13,0.091,14,1.673,15,1.361,16,0.024,17,0.024,42,1.541,43,1.673,45,0.698,46,2.065,48,1.277,50,1.505,51,1.602,52,1.505,70,2.621,73,2.128,74,2.467,75,2.254,77,2.296,78,2.296,79,1.277,80,1.695,89,2.467,92,2.128,93,3.76,102,4.159,111,4.159,300,2.467,309,2.065,334,2.467,335,3.385,336,2.981,337,4.091,338,2.981,339,2.981,340,4.159,341,4.091]],["title/controllers/UsersController.html",[0,1.162,342,1.94]],["body/controllers/UsersController.html",[0,0.632,2,0.632,3,0.254,4,0.225,5,0.225,7,0.668,8,0.036,9,0.433,12,0.254,13,0.051,14,0.941,15,0.766,16,0.016,17,0.016,45,0.392,46,1.347,48,1.037,50,1.677,51,0.915,52,2.086,57,1.197,70,2.769,75,1.376,77,1.864,78,2.319,79,1.441,80,1.376,109,1.197,112,1.516,114,1.728,115,2.381,126,3.132,127,3.132,199,0.847,200,2.009,217,2.207,223,2.59,243,3.032,252,2.47,254,3.104,264,1.904,275,2.768,280,2.207,290,1.904,304,2.207,307,1.387,308,3.132,311,2.207,312,2.207,313,1.387,314,1.387,315,1.387,320,1.387,321,2.207,324,2.207,325,2.207,326,2.207,342,1.678,343,1.387,344,2.667,345,3.321,346,2.667,347,1.677,348,1.677,349,1.677,350,3.641,351,3.419,352,1.677,353,2.667,354,2.667,355,2.667,356,1.677,357,2.667,358,2.667,359,1.677,360,2.667,361,2.667,362,2.667,363,3.785,364,1.677,365,2.667,366,2.667,367,2.667,368,1.677,369,1.677,370,1.677,371,3.321,372,1.677,373,1.387,374,1.387,375,1.387,376,3.321,377,1.677,378,1.677,379,1.677,380,1.677,381,1.677,382,1.387,383,1.677,384,1.677,385,1.677,386,1.677,387,1.677,388,1.677,389,1.677,390,1.677,391,1.677,392,1.677,393,1.677]],["title/modules/UsersModule.html",[18,1.162,32,1.408]],["body/modules/UsersModule.html",[2,1.618,3,0.486,4,0.429,5,0.429,7,0.786,8,0.036,9,0.827,12,0.486,13,0.097,16,0.025,17,0.025,18,1.825,20,1.462,21,1.462,22,1.797,23,1.797,24,1.462,25,2.719,26,2.719,30,2.168,32,2.592,33,2.41,34,1.797,35,1.462,37,2.014,66,2.701,75,2.485,342,3.048,375,2.649,394,2.649,395,2.649,396,2.649,397,3.202,398,3.202,399,3.202]],["title/injectables/UsersService.html",[42,1.162,75,1.278]],["body/injectables/UsersService.html",[3,0.366,4,0.323,5,0.323,7,0.631,8,0.036,9,0.623,12,0.366,13,0.073,15,1.102,16,0.021,17,0.021,42,1.327,43,1.355,45,0.565,46,1.779,48,1.299,50,1.779,51,1.668,52,1.779,59,2.394,66,1.518,70,2.85,71,1.997,73,2.515,75,1.46,77,2.335,78,2.335,79,1.299,80,1.724,84,3.265,87,2.617,88,1.997,90,1.997,91,1.997,92,1.723,226,3.784,243,2.943,252,2.85,254,1.518,335,3.442,350,3.442,351,2.97,373,1.997,374,1.997,400,1.997,401,3.523,402,2.414,403,2.414,404,2.414,405,2.414,406,3.523,407,2.414,408,2.414,409,2.414,410,2.414,411,2.414,412,2.414,413,2.414,414,2.414,415,2.414,416,2.414,417,2.414]],["title/coverage.html",[418,2.989]],["body/coverage.html",[0,1.85,1,1.775,5,0.378,6,2.335,8,0.036,10,1.424,13,0.163,16,0.023,17,0.023,24,1.288,42,1.85,44,2.335,55,1.775,56,2.335,59,1.288,69,2.335,75,1.169,79,0.881,97,1.584,99,2.811,100,2.811,114,1.288,123,1.775,194,2.014,213,2.335,219,2.335,223,1.584,224,2.335,225,2.811,252,1.584,253,2.335,254,1.775,255,2.335,265,1.775,266,2.335,275,1.775,276,2.335,281,1.775,282,2.335,290,2.014,309,1.424,334,2.335,342,1.775,343,2.335,400,2.335,418,2.014,419,2.014,420,2.821,421,5.993,422,4.909,423,4.536,424,4.909,425,2.335,426,2.821,427,3.937,428,2.821,429,2.821,430,2.821,431,2.821]],["title/dependencies.html",[21,1.691,432,2.14]],["body/dependencies.html",[8,0.036,9,1.006,13,0.148,16,0.029,17,0.029,21,1.779,190,1.968,196,2.782,199,1.968,278,3.225,279,3.225,433,3.897,434,3.897,435,5.324,436,3.897,437,3.897,438,3.897,439,3.225,440,3.897,441,3.897,442,3.897,443,3.897,444,3.897,445,3.897,446,3.897,447,3.897]],["title/miscellaneous/enumerations.html",[448,1.627,449,3.064]],["body/miscellaneous/enumerations.html",[8,0.036,16,0.028,17,0.028,45,0.879,105,3.945,114,2.176,140,3.945,168,3.945,216,4.261,351,3.403,448,2.364,449,3.11,450,3.758,451,3.758,452,3.758,453,4.767,454,4.767,455,4.767,456,3.758,457,4.767,458,4.767]],["title/miscellaneous/functions.html",[448,1.627,459,3.064]],["body/miscellaneous/functions.html",[8,0.032,16,0.032,17,0.032,24,2.607,45,1.071,425,3.787,448,2.879,459,3.787,460,4.576]],["title/index.html",[45,0.605,461,2.14,462,2.14]],["body/index.html",[4,0.308,8,0.034,16,0.02,17,0.02,35,2.041,115,2.545,200,1.05,209,3.698,210,1.904,262,1.904,302,1.904,340,2.814,382,2.814,418,1.642,419,1.642,463,2.301,464,2.301,465,4.045,466,2.301,467,2.301,468,2.301,469,2.301,470,2.301,471,2.301,472,4.045,473,2.301,474,2.301,475,4.469,476,2.301,477,5.164,478,2.301,479,5.164,480,2.301,481,2.301,482,2.301,483,3.401,484,2.301,485,2.301,486,2.301,487,4.045,488,2.301,489,2.301,490,2.301,491,2.301,492,4.469,493,2.301,494,2.301,495,2.301,496,2.301,497,2.301,498,3.401,499,2.301,500,4.045,501,2.301,502,3.698,503,3.401,504,2.301,505,2.301,506,2.301,507,2.301,508,2.301,509,2.301,510,4.045,511,2.301,512,2.301,513,2.301,514,2.301,515,2.301,516,2.301,517,4.045,518,2.301,519,2.301,520,2.301,521,2.301,522,2.301,523,2.301,524,3.401,525,2.301,526,2.301,527,2.301,528,2.301,529,2.301,530,3.401,531,2.301,532,2.301,533,2.301,534,2.814,535,3.401,536,2.301,537,2.301,538,2.301,539,2.301,540,2.301,541,2.301,542,2.301,543,2.301,544,2.301,545,2.301,546,2.301,547,1.904,548,2.301,549,2.301,550,2.301,551,2.301,552,2.301,553,2.301,554,1.447]],["title/license.html",[461,2.14,462,2.14,554,1.627]],["body/license.html",[8,0.024,16,0.024,17,0.024,35,1.356,143,2.457,160,3.857,419,2.12,439,2.457,534,2.457,554,1.868,555,4.66,556,2.969,557,2.969,558,2.969,559,2.969,560,2.969,561,4.079,562,2.969,563,2.969,564,2.969,565,2.969,566,2.969,567,2.969,568,4.079,569,5.752,570,2.969,571,2.969,572,2.969,573,2.969,574,4.079,575,2.969,576,2.969,577,4.079,578,2.969,579,2.969,580,2.969,581,2.969,582,2.969,583,2.969,584,2.969,585,4.079,586,2.969,587,2.969,588,2.969,589,2.969,590,2.969,591,2.969,592,2.969,593,4.079,594,4.079,595,2.969,596,2.969,597,2.969,598,2.969,599,2.969,600,2.969,601,2.969,602,2.969,603,2.969,604,2.969,605,2.969,606,2.969,607,2.969,608,2.969,609,2.969,610,2.969,611,2.969,612,2.969,613,2.969,614,2.969,615,2.969,616,2.969,617,2.969,618,2.969,619,2.969,620,2.969,621,2.969,622,2.969,623,2.969]],["title/modules.html",[20,1.912]],["body/modules.html",[8,0.03,16,0.03,17,0.03,19,2.663,20,1.933,30,2.138,31,2.376,32,1.933,502,4.752,624,5.742,625,5.742,626,5.742]],["title/overview.html",[627,3.464]],["body/overview.html",[2,1.137,8,0.035,10,2.373,16,0.024,17,0.024,18,1.137,19,3.673,20,1.378,21,1.378,22,1.694,23,1.694,24,1.378,25,1.694,26,1.694,27,2.497,28,2.497,29,2.497,30,2.757,31,3.138,32,2.553,33,2.316,34,1.694,35,1.378,43,1.694,59,2.553,62,2.497,63,2.497,64,2.497,75,2.316,98,1.378,309,2.373,329,2.497,331,2.497,394,2.497,395,2.497,396,2.497,627,2.497,628,4.7,629,3.018]],["title/properties.html",[101,1.691,432,2.14]],["body/properties.html",[8,0.036,16,0.031,17,0.031,101,2.051,200,2.051,547,3.717,554,2.826,630,4.492,631,4.492,632,4.492]],["title/routes.html",[633,3.464]],["body/routes.html",[8,0.032,16,0.032,17,0.032,633,3.959]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["0",{"_index":421,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":631,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":442,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":445,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":441,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":422,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":428,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":423,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":427,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":424,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":429,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":367,"title":{},"body":{"controllers/UsersController.html":{}}}],["1.1.23",{"_index":434,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":383,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":435,"title":{},"body":{"dependencies.html":{}}}],["10})@apiquery({name",{"_index":364,"title":{},"body":{"controllers/UsersController.html":{}}}],["123",{"_index":415,"title":{},"body":{"injectables/UsersService.html":{}}}],["1234",{"_index":260,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":257,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["16t07:46:32+0000",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":341,"title":{},"body":{"injectables/PostsService.html":{}}}],["2.0.5",{"_index":437,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":304,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":292,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{},"license.html":{}}}],["4",{"_index":628,"title":{},"body":{"overview.html":{}}}],["6",{"_index":629,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":440,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":447,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["above",{"_index":592,"title":{},"body":{"license.html":{}}}],["action",{"_index":617,"title":{},"body":{"license.html":{}}}],["alice",{"_index":416,"title":{},"body":{"injectables/UsersService.html":{}}}],["alice@email.com",{"_index":417,"title":{},"body":{"injectables/UsersService.html":{}}}],["amazing",{"_index":540,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":583,"title":{},"body":{"license.html":{}}}],["api",{"_index":366,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":311,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":288,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apipropertyoptional",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":113,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":124,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":376,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":312,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":313,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":317,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":378,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":382,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":356,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":471,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arising",{"_index":621,"title":{},"body":{"license.html":{}}}],["array",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["associated",{"_index":570,"title":{},"body":{"license.html":{}}}],["auth",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":67,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":55,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":547,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authors",{"_index":610,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":59,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["backers",{"_index":541,"title":{},"body":{"index.html":{}}}],["based",{"_index":358,"title":{},"body":{"controllers/UsersController.html":{}}}],["blog",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["board",{"_index":533,"title":{},"body":{"index.html":{}}}],["body",{"_index":307,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":626,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":624,"title":{},"body":{"modules.html":{}}}],["building",{"_index":466,"title":{},"body":{"index.html":{}}}],["c",{"_index":556,"title":{},"body":{"license.html":{}}}],["channel",{"_index":505,"title":{},"body":{"index.html":{}}}],["character",{"_index":245,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["characters",{"_index":240,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["charge",{"_index":565,"title":{},"body":{"license.html":{}}}],["check",{"_index":492,"title":{},"body":{"index.html":{}}}],["claim",{"_index":613,"title":{},"body":{"license.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":98,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":62,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":63,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":64,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":329,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":330,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":331,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":394,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":395,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":396,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["come",{"_index":495,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":433,"title":{},"body":{"dependencies.html":{}}}],["conditions",{"_index":591,"title":{},"body":{"license.html":{}}}],["connection",{"_index":622,"title":{},"body":{"license.html":{}}}],["console.log(createpostdto",{"_index":323,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(createuserdto",{"_index":390,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(isauth",{"_index":410,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(patchpostdto",{"_index":328,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(patchuserdto",{"_index":393,"title":{},"body":{"controllers/UsersController.html":{}}}],["const",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":73,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":402,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["constructor(usersservice",{"_index":74,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["content",{"_index":102,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["content'})@isstring()@isoptional",{"_index":116,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["context",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["contract",{"_index":618,"title":{},"body":{"license.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":316,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":377,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["copies",{"_index":585,"title":{},"body":{"license.html":{}}}],["copy",{"_index":568,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":555,"title":{},"body":{"license.html":{}}}],["courses",{"_index":512,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":418,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["created",{"_index":294,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost",{"_index":284,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":322,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":287,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":97,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto",{"_index":123,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["creates",{"_index":289,"title":{},"body":{"controllers/PostsController.html":{}}}],["createuserdto",{"_index":223,"title":{"classes/CreateUserDTO.html":{}},"body":{"classes/CreateUserDTO.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createusers",{"_index":344,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":389,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":347,"title":{},"body":{"controllers/UsersController.html":{}}}],["damages",{"_index":614,"title":{},"body":{"license.html":{}}}],["date",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["deal",{"_index":572,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":623,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":112,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":507,"title":{},"body":{"index.html":{}}}],["defaultvaluepipe",{"_index":372,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":387,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":385,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":48,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":480,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":519,"title":{},"body":{"index.html":{}}}],["discord",{"_index":504,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":581,"title":{},"body":{"license.html":{}}}],["dive",{"_index":506,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":419,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["draft",{"_index":453,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["draft','scheduled','review','published",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dtos/create",{"_index":314,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":373,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":315,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":489,"title":{},"body":{"index.html":{}}}],["each",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":467,"title":{},"body":{"index.html":{}}}],["eight",{"_index":239,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["email",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"injectables/UsersService.html":{}}}],["endpoint",{"_index":326,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["enterprise",{"_index":523,"title":{},"body":{"index.html":{}}}],["entries",{"_index":360,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":449,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/poststatus.enum",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enums/posttype.enum",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["error",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["event",{"_index":609,"title":{},"body":{"license.html":{}}}],["example",{"_index":115,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["existing",{"_index":303,"title":{},"body":{"controllers/PostsController.html":{}}}],["experience",{"_index":509,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":439,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":267,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["featured",{"_index":118,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":103,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["fetched",{"_index":357,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":353,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":493,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["files",{"_index":571,"title":{},"body":{"license.html":{}}}],["findall",{"_index":335,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getusersparamdto",{"_index":404,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":337,"title":{},"body":{"injectables/PostsService.html":{}}}],["findonebyid",{"_index":401,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":406,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":226,"title":{},"body":{"classes/CreateUserDTO.html":{},"injectables/UsersService.html":{}}}],["fitness",{"_index":605,"title":{},"body":{"license.html":{}}}],["follow",{"_index":526,"title":{},"body":{"index.html":{}}}],["following",{"_index":590,"title":{},"body":{"license.html":{}}}],["format",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["forwardref",{"_index":66,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":465,"title":{},"body":{"index.html":{}}}],["free",{"_index":564,"title":{},"body":{"license.html":{}}}],["full",{"_index":522,"title":{},"body":{"index.html":{}}}],["function",{"_index":426,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":459,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":588,"title":{},"body":{"license.html":{}}}],["garcia",{"_index":559,"title":{},"body":{"license.html":{}}}],["get('/:id",{"_index":381,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":352,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":298,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":47,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":285,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":318,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":297,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":461,"title":{"index.html":{},"license.html":{}},"body":{}}],["getusers",{"_index":345,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":349,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":252,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["granted",{"_index":563,"title":{},"body":{"license.html":{}}}],["graph",{"_index":514,"title":{},"body":{"index.html":{}}}],["grow",{"_index":537,"title":{},"body":{"index.html":{}}}],["hands",{"_index":508,"title":{},"body":{"index.html":{}}}],["handy",{"_index":496,"title":{},"body":{"index.html":{}}}],["hello",{"_index":53,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":520,"title":{},"body":{"index.html":{}}}],["here",{"_index":545,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":562,"title":{},"body":{"license.html":{}}}],["holders",{"_index":611,"title":{},"body":{"license.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isurl()@isoptional",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":551,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://schema.org\"}'})@isjson()@isoptional",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["id",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["image",{"_index":119,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["implied",{"_index":601,"title":{},"body":{"license.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["included",{"_index":595,"title":{},"body":{"license.html":{}}}],["including",{"_index":574,"title":{},"body":{"license.html":{}}}],["index",{"_index":45,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":42,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":43,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":379,"title":{},"body":{"controllers/UsersController.html":{}}}],["installcompile",{"_index":478,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":391,"title":{},"body":{"controllers/UsersController.html":{}}}],["interact",{"_index":515,"title":{},"body":{"index.html":{}}}],["isarray",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":71,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isemail",{"_index":248,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["isemail()@isnotempty",{"_index":228,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["isenum",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":259,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDTO.html":{},"classes/PatchPostDto.html":{}}}],["iso8601",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{}}}],["isstring",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDTO.html":{}}}],["isstring()@isnotempty",{"_index":220,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":230,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":234,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":232,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["isurl",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["joana",{"_index":413,"title":{},"body":{"injectables/UsersService.html":{}}}],["joana@email.com",{"_index":414,"title":{},"body":{"injectables/UsersService.html":{}}}],["job",{"_index":530,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":532,"title":{},"body":{"index.html":{}}}],["john",{"_index":411,"title":{},"body":{"injectables/UsersService.html":{}}}],["john@email.com",{"_index":412,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":543,"title":{},"body":{"index.html":{}}}],["joão",{"_index":557,"title":{},"body":{"license.html":{}}}],["json",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":548,"title":{},"body":{"index.html":{}}}],["key",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{}}}],["kind",{"_index":600,"title":{},"body":{"license.html":{}}}],["lastname",{"_index":227,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["learn",{"_index":499,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letter",{"_index":242,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["letters",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["liability",{"_index":615,"title":{},"body":{"license.html":{}}}],["liable",{"_index":612,"title":{},"body":{"license.html":{}}}],["license",{"_index":554,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":535,"title":{},"body":{"index.html":{}}}],["limit",{"_index":350,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["limitation",{"_index":575,"title":{},"body":{"license.html":{}}}],["limited",{"_index":602,"title":{},"body":{"license.html":{}}}],["linkedin",{"_index":528,"title":{},"body":{"index.html":{}}}],["list",{"_index":354,"title":{},"body":{"controllers/UsersController.html":{}}}],["login",{"_index":72,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(id",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":529,"title":{},"body":{"index.html":{}}}],["loop",{"_index":525,"title":{},"body":{"index.html":{}}}],["matches",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDTO.html":{}}}],["matches(/^(?=.*[a",{"_index":251,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["matches(/^[a",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["maxlength",{"_index":247,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["maxlength(96",{"_index":249,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["merchantability",{"_index":604,"title":{},"body":{"license.html":{}}}],["merge",{"_index":579,"title":{},"body":{"license.html":{}}}],["message",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDTO.html":{}}}],["meta",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metadata",{"_index":444,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":104,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["methods",{"_index":46,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":238,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["minlength",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDTO.html":{}}}],["minlength(3",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDTO.html":{}}}],["minlength(4",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":250,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["mira",{"_index":560,"title":{},"body":{"license.html":{}}}],["miscellaneous",{"_index":448,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":534,"title":{},"body":{"index.html":{},"license.html":{}}}],["mode",{"_index":483,"title":{},"body":{"index.html":{}}}],["modify",{"_index":578,"title":{},"body":{"license.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":500,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":549,"title":{},"body":{"index.html":{}}}],["name",{"_index":78,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":262,"title":{},"body":{"classes/GetUsersParamDto.html":{},"index.html":{}}}],["needs",{"_index":269,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":472,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":553,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":436,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":278,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":438,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":290,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["node.js",{"_index":464,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":608,"title":{},"body":{"license.html":{}}}],["notice",{"_index":593,"title":{},"body":{"license.html":{}}}],["npm",{"_index":477,"title":{},"body":{"index.html":{}}}],["number",{"_index":243,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["obtaining",{"_index":567,"title":{},"body":{"license.html":{}}}],["offer",{"_index":531,"title":{},"body":{"index.html":{}}}],["official",{"_index":510,"title":{},"body":{"index.html":{}}}],["one",{"_index":241,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["open",{"_index":536,"title":{},"body":{"index.html":{}}}],["option",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["optional",{"_index":80,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options.dto",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options.dto.ts",{"_index":219,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":221,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.dto.ts:9",{"_index":222,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["otherwise",{"_index":620,"title":{},"body":{"license.html":{}}}],["out",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":627,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":432,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":351,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":264,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param.dto",{"_index":374,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":255,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":258,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":77,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":371,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":521,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":272,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":268,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":277,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["particular",{"_index":606,"title":{},"body":{"license.html":{}}}],["passed",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["password",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{}}}],["patch",{"_index":308,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":265,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchuser",{"_index":346,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":392,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":369,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":275,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":362,"title":{},"body":{"controllers/UsersController.html":{}}}],["permission",{"_index":561,"title":{},"body":{"license.html":{}}}],["permit",{"_index":586,"title":{},"body":{"license.html":{}}}],["person",{"_index":566,"title":{},"body":{"license.html":{}}}],["persons",{"_index":587,"title":{},"body":{"license.html":{}}}],["please",{"_index":503,"title":{},"body":{"index.html":{}}}],["portions",{"_index":597,"title":{},"body":{"license.html":{}}}],["position",{"_index":365,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":114,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post','page','story','series",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@apiresponse({status",{"_index":291,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isstring()@isnotempty()@matches(/^[a",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto",{"_index":273,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["post.dto.ts",{"_index":100,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:101",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:11",{"_index":271,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:127",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:28",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:36",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:49",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:57",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:65",{"_index":117,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:74",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:82",{"_index":122,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:91",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts",{"_index":283,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":333,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":281,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":31,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":309,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus})@isnotempty()@isenum(poststatus",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posttype",{"_index":105,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttype})@isnotempty()@isenum(posttype",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["prefix",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":485,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":463,"title":{},"body":{"index.html":{}}}],["project",{"_index":475,"title":{},"body":{"index.html":{}}}],["properties",{"_index":101,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"properties.html":{}}}],["provided",{"_index":598,"title":{},"body":{"license.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/posts.service",{"_index":310,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/users.service",{"_index":375,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":70,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["publish",{"_index":580,"title":{},"body":{"license.html":{}}}],["published",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":106,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["purpose",{"_index":607,"title":{},"body":{"license.html":{}}}],["query",{"_index":363,"title":{},"body":{"controllers/UsersController.html":{}}}],["query'})@apiquery({name",{"_index":359,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":384,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":386,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":501,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":544,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["real",{"_index":516,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":443,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":355,"title":{},"body":{"controllers/UsersController.html":{}}}],["repository",{"_index":474,"title":{},"body":{"index.html":{}}}],["request",{"_index":325,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["required",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":494,"title":{},"body":{"index.html":{}}}],["response",{"_index":293,"title":{},"body":{"controllers/PostsController.html":{}}}],["restriction",{"_index":573,"title":{},"body":{"license.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["return",{"_index":52,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":361,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":50,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":455,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["rights",{"_index":576,"title":{},"body":{"license.html":{}}}],["routes",{"_index":633,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":479,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":446,"title":{},"body":{"dependencies.html":{}}}],["sample_token",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["scalable",{"_index":468,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":454,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["schema",{"_index":107,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sell",{"_index":584,"title":{},"body":{"license.html":{}}}],["sent",{"_index":324,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["serialize",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":458,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server",{"_index":469,"title":{},"body":{"index.html":{}}}],["service",{"_index":380,"title":{},"body":{"controllers/UsersController.html":{}}}],["setup",{"_index":476,"title":{},"body":{"index.html":{}}}],["shall",{"_index":594,"title":{},"body":{"license.html":{}}}],["shoud",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["side",{"_index":470,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["slug",{"_index":108,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["small",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["software",{"_index":569,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["special",{"_index":244,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["specific",{"_index":256,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["sponsors",{"_index":539,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":460,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":450,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":451,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":44,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":49,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":399,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":65,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":408,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":69,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:11",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:16",{"_index":81,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":76,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":425,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":99,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":266,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":452,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":456,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":282,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:13",{"_index":299,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:25",{"_index":296,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:38",{"_index":306,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":332,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":334,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:5",{"_index":336,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:8",{"_index":338,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":224,"title":{},"body":{"classes/CreateUserDTO.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":253,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":276,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":400,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:12",{"_index":405,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:32",{"_index":407,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:6",{"_index":403,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.controller.ts",{"_index":343,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:46",{"_index":368,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:55",{"_index":348,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:61",{"_index":370,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":68,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":397,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":481,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":484,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":486,"title":{},"body":{"index.html":{}}}],["started",{"_index":462,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":473,"title":{},"body":{"index.html":{}}}],["statements",{"_index":420,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":109,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":524,"title":{},"body":{"index.html":{}}}],["story",{"_index":457,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["string",{"_index":51,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["subject",{"_index":589,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":582,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":596,"title":{},"body":{"license.html":{}}}],["successfully",{"_index":321,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@patch",{"_index":305,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully'})@post",{"_index":295,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":320,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":502,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":625,"title":{},"body":{"modules.html":{}}}],["table",{"_index":431,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":430,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":110,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["test",{"_index":340,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["test:covresources",{"_index":491,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":490,"title":{},"body":{"index.html":{}}}],["tests",{"_index":487,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":538,"title":{},"body":{"index.html":{}}}],["this.authservice.isauth",{"_index":409,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.postsservice.findall(userid",{"_index":319,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.usersservice.findall(getusersparamdto",{"_index":388,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid('123",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":339,"title":{},"body":{"injectables/PostsService.html":{}}}],["thrown",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":517,"title":{},"body":{"index.html":{}}}],["title",{"_index":111,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["title'})@isstring()@isnotempty()@minlength(4",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tort",{"_index":619,"title":{},"body":{"license.html":{}}}],["touch",{"_index":546,"title":{},"body":{"index.html":{}}}],["transform",{"_index":263,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["transformer",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{}}}],["true})@isoptional()@minlength(3",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":552,"title":{},"body":{"index.html":{}}}],["type",{"_index":79,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["types",{"_index":279,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["undefined})@isarray()@isoptional()@validatenested({each",{"_index":129,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isarray()@isstring({each",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unit",{"_index":488,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":632,"title":{},"body":{"properties.html":{}}}],["updated",{"_index":274,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["updated'})@isint()@isnotempty",{"_index":270,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatepost",{"_index":286,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":327,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":301,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":302,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["url",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["use",{"_index":577,"title":{},"body":{"license.html":{}}}],["used",{"_index":261,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["user",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{}}}],["user.dto",{"_index":280,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":225,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":231,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:22",{"_index":233,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:26",{"_index":229,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:35",{"_index":246,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["userid",{"_index":300,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["users",{"_index":254,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":398,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":342,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":32,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":75,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["using",{"_index":518,"title":{},"body":{"index.html":{}}}],["validatenested",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validator",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["version",{"_index":630,"title":{},"body":{"properties.html":{}}}],["video",{"_index":511,"title":{},"body":{"index.html":{}}}],["visit",{"_index":498,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":513,"title":{},"body":{"index.html":{}}}],["vitor",{"_index":558,"title":{},"body":{"license.html":{}}}],["want",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["warranties",{"_index":603,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":599,"title":{},"body":{"license.html":{}}}],["watch",{"_index":482,"title":{},"body":{"index.html":{}}}],["website",{"_index":550,"title":{},"body":{"index.html":{}}}],["whether",{"_index":616,"title":{},"body":{"license.html":{}}}],["without",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{},"license.html":{}}}],["working",{"_index":497,"title":{},"body":{"index.html":{}}}],["world",{"_index":54,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":527,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":542,"title":{},"body":{"index.html":{}}}],["z0",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":237,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":236,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["za",{"_index":235,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["zoom",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [UsersModule, PostsModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(id: string, email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n\n  public login(id: string, email: string, password: string) {\n    const user = this.usersService.findOneById('123');\n    return 'SAMPLE_TOKEN';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'The post content'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Featured image for your blog post', example: 'http://localhost.com/images/image1.jpg'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined})@IsArray()@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:127\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Possible values: 'post','page','story','series'', enum: postType})@IsNotEmpty()@IsEnum(postType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the blog post is published (ISO8601 format)', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown', example: '{\n \"@context\": \"https://schema.org\"}'})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A slug shoud be all small letters and uses only '-' and without spaces. For example 'my-url'', example: 'my-blog-post'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug shoud be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Possible values: 'draft','scheduled','review','published'', enum: postStatus})@IsNotEmpty()@IsEnum(postStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of tags passed as string values', example: undefined})@IsArray()@IsString({each: true})@IsOptional()@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the title for the blog post', example: 'This is a title'})@IsString()@IsNotEmpty()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEnum,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { postType } from '../enums/postType.enum';\nimport { postStatus } from '../enums/postStatus.enum';\nimport { CreatePostMetaOptionsDto } from './create-post-meta-options.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'This is the title for the blog post',\n    example: 'This is a title',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(4)\n  title: string;\n\n  @ApiProperty({\n    description: \"Possible values: 'post','page','story','series'\",\n    enum: postType,\n  })\n  @IsNotEmpty()\n  @IsEnum(postType)\n  postType: postType;\n\n  @ApiProperty({\n    description:\n      \"A slug shoud be all small letters and uses only '-' and without spaces. For example 'my-url'\",\n    example: 'my-blog-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug shoud be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  slug: string;\n\n  @ApiProperty({\n    description: \"Possible values: 'draft','scheduled','review','published'\",\n    enum: postStatus,\n  })\n  @IsNotEmpty()\n  @IsEnum(postStatus)\n  status: postStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'The post content',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object else a validation error will be thrown',\n    example: '{\\r\\n \"@context\": \"https://schema.org\"}',\n  })\n  @IsJSON()\n  @IsOptional()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'Featured image for your blog post',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsUrl()\n  @IsOptional()\n  featuredImageUrl?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'The date on which the blog post is published (ISO8601 format)',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of tags passed as string values',\n    example: ['nestjs', 'typescript'],\n  })\n  @IsArray()\n  @IsString({ each: true })\n  @IsOptional()\n  @MinLength(3, { each: true })\n  tags?: string[];\n\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          description:\n            'The key can be any string identifier for your meta option',\n          example: 'sidebarEnabled',\n        },\n        value: {\n          type: 'any',\n          description: 'Any value that you want to save to the key',\n          example: true,\n        },\n      },\n    },\n  })\n  @IsArray()\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  metaOptions?: CreatePostMetaOptionsDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDTO.html":{"url":"classes/CreateUserDTO.html","title":"class - CreateUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsNotEmpty,\n  IsOptional,\n  MinLength,\n  MaxLength,\n  IsEmail,\n  Matches,\n} from 'class-validator';\n\nexport class CreateUserDTO {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: 1234,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number) //This was used because the URL is a string, so we need to transform the param into a number\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'The ID of the post that needs to be updated',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDTO)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDTO } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDTO) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'You get a 201 response if your post is created successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates a existing blog post'})@ApiResponse({status: 200, description: 'A 200 response if the post is updated successfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Get('/:userId?')\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n\n  @ApiOperation({\n    summary: 'Creates a new blog post',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response if your post is created successfully',\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    console.log(createPostDto);\n    return 'You sent a POST request to posts endpoint';\n  }\n\n  @ApiOperation({\n    summary: 'Updates a existing blog post',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'A 200 response if the post is updated successfully',\n  })\n  @Patch()\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    console.log(patchPostDto);\n    return 'You sent a PATCH request to posts endpoint';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class PostsService {\n  constructor(private readonly usersService: UsersService) {}\n\n  public findAll(userId: string) {\n    const user = this.usersService.findOneById(userId);\n\n    return [\n      {\n        user: user,\n        title: 'Test Title',\n        content: 'Test Content',\n      },\n      {\n        user: user,\n        title: 'Test Title 2',\n        content: 'Test Content 2',\n      },\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number that you want the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Param,\n  Query,\n  Body,\n  ParseIntPipe,\n  DefaultValuePipe,\n  Patch,\n} from '@nestjs/common';\nimport { CreateUserDTO } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {} // Injecting Users Service\n\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users on the application',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfully based on the query',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description:\n      'The position of the page number that you want the API to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUsersParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUsersParamDto, limit, page);\n  }\n\n  @Post()\n  public createUsers(@Body() createUserDto: CreateUserDTO) {\n    console.log(createUserDto instanceof CreateUserDTO);\n    return 'You sent a POST request to users endpoint';\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    console.log(patchUserDto);\n    return 'You sent a PATCH request to users endpoint';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  imports: [forwardRef(() => AuthModule)],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: number; firstName: string; email: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n  ) {}\n\n  public findAll(\n    getUsersParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ) {\n    const isAuth = this.authService.isAuth();\n    console.log(isAuth);\n\n    return [\n      {\n        firstName: 'John',\n        email: 'john@email.com',\n      },\n      {\n        firstName: 'Joana',\n        email: 'joana@email.com',\n      },\n    ];\n  }\n\n  public findOneById(id: string) {\n    return {\n      id: 123,\n      firstName: 'Alice',\n      email: 'alice@email.com',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2024 João Vitor Garcia Mira\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
